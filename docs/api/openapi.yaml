openapi: 3.0.3
info:
  title: 이커머스 시스템 API
  description: |
    이커머스 시스템의 RESTful API 명세서입니다.

    ## 주요 기능
    - 상품 조회 및 인기 상품 통계
    - 장바구니 관리
    - 주문 및 결제 처리
    - 쿠폰 발급 및 사용
    - 잔액 관리

    ## 인증
    모든 API는 JWT 토큰 기반 인증을 사용합니다.
  version: 1.0.0
  contact:
    name: API Support
    email: support@ecommerce.com

servers:
  - url: https://api.ecommerce.com/v1
    description: Production server
  - url: https://api-dev.ecommerce.com/v1
    description: Development server
  - url: http://localhost:8080/v1
    description: Local server

tags:
  - name: Products
    description: 상품 관리 API
  - name: Cart
    description: 장바구니 관리 API
  - name: Orders
    description: 주문 관리 API
  - name: Payment
    description: 결제 처리 API
  - name: Coupons
    description: 쿠폰 관리 API
  - name: Balance
    description: 잔액 관리 API
  - name: Admin
    description: 관리자 API

security:
  - bearerAuth: []

paths:
  /products/{productId}:
    get:
      tags:
        - Products
      summary: 상품 상세 조회
      description: 단일 상품의 상세 정보를 조회합니다.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          required: true
          description: 상품 ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  value:
                    success: true
                    data:
                      productId: 1
                      name: 노트북
                      description: 고성능 노트북
                      price: 1500000
                      stock: 50
                      maxQuantityPerCart: 5
                      status: AVAILABLE
                      createdAt: "2025-10-01T10:00:00Z"
                      updatedAt: "2025-10-31T10:00:00Z"
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: PRODUCT_NOT_FOUND
                  message: 상품을 찾을 수 없습니다

  /products:
    get:
      tags:
        - Products
      summary: 여러 상품 조회
      description: 여러 상품을 한 번에 조회합니다.
      operationId: getProducts
      parameters:
        - name: ids
          in: query
          required: true
          description: 상품 ID 목록 (쉼표로 구분)
          schema:
            type: string
            example: "1,2,3,4,5"
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  products:
                    - productId: 1
                      name: 노트북
                      price: 1500000
                      stock: 50
                      status: AVAILABLE
                    - productId: 2
                      name: 마우스
                      price: 30000
                      stock: 0
                      status: OUT_OF_STOCK
                  totalCount: 2

  /products/popular:
    get:
      tags:
        - Products
      summary: 인기 상품 조회
      description: 최근 3일간 판매량 기준 상위 5개 상품을 조회합니다.
      operationId: getPopularProducts
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  products:
                    - rank: 1
                      productId: 10
                      name: 무선 이어폰
                      price: 150000
                      stock: 100
                      salesCount: 250
                      salesPeriod:
                        startDate: "2025-10-28"
                        endDate: "2025-10-31"
                  updatedAt: "2025-10-31T00:00:00Z"

  /carts:
    get:
      tags:
        - Cart
      summary: 장바구니 조회
      description: 현재 사용자의 장바구니를 조회합니다.
      operationId: getCart
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  cartId: 123
                  userId: 1
                  items:
                    - cartItemId: 1
                      productId: 10
                      productName: 노트북
                      price: 1500000
                      quantity: 2
                      subtotal: 3000000
                      stock: 50
                      maxQuantityPerCart: 5
                  totalAmount: 3000000
                  itemCount: 1
                  updatedAt: "2025-10-31T10:00:00Z"

  /carts/items:
    post:
      tags:
        - Cart
      summary: 장바구니에 상품 추가
      description: 장바구니에 상품을 추가합니다.
      operationId: addCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: integer
                  format: int64
                  description: 상품 ID
                  example: 10
                quantity:
                  type: integer
                  minimum: 1
                  description: 수량
                  example: 2
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  cartItemId: 1
                  productId: 10
                  productName: 노트북
                  quantity: 2
                  price: 1500000
                  subtotal: 3000000
                message: 장바구니에 상품이 추가되었습니다
        '400':
          description: 잘못된 요청 (재고 부족, 제한 수량 초과)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                insufficientStock:
                  summary: 재고 부족
                  value:
                    success: false
                    error:
                      code: INSUFFICIENT_STOCK
                      message: 재고가 부족합니다
                      details:
                        requestedQuantity: 10
                        availableStock: 5
                exceedMaxQuantity:
                  summary: 제한 수량 초과
                  value:
                    success: false
                    error:
                      code: EXCEED_MAX_QUANTITY
                      message: 장바구니 제한 수량을 초과했습니다
                      details:
                        maxQuantityPerCart: 5
                        requestedQuantity: 10
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /carts/items/{cartItemId}:
    patch:
      tags:
        - Cart
      summary: 장바구니 상품 수량 변경
      description: 장바구니 상품의 수량을 변경합니다.
      operationId: updateCartItem
      parameters:
        - name: cartItemId
          in: path
          required: true
          description: 장바구니 아이템 ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: 수량
                  example: 3
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  cartItemId: 1
                  quantity: 3
                  subtotal: 4500000
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 장바구니 아이템을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Cart
      summary: 장바구니 상품 삭제
      description: 장바구니에서 상품을 삭제합니다.
      operationId: deleteCartItem
      parameters:
        - name: cartItemId
          in: path
          required: true
          description: 장바구니 아이템 ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: 삭제 성공 (응답 본문 없음)
        '404':
          description: 장바구니 아이템을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      tags:
        - Orders
      summary: 주문 생성
      description: 장바구니의 상품들로 주문을 생성합니다.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartItemIds
                - shippingAddress
              properties:
                cartItemIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: 주문할 장바구니 아이템 ID 목록
                  example: [1, 2, 3]
                shippingAddress:
                  $ref: '#/components/schemas/ShippingAddress'
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  orderId: 1001
                  orderNumber: ORD-20251031-1001
                  status: PENDING_PAYMENT
                  orderItems:
                    - orderItemId: 1
                      productId: 10
                      productName: 노트북
                      price: 1500000
                      quantity: 2
                      subtotal: 3000000
                  totalAmount: 3000000
                  shippingAddress:
                    recipientName: 홍길동
                    phone: "010-1234-5678"
                    zipCode: "12345"
                    address: 서울시 강남구 테헤란로 123
                    detailAddress: 456호
                  createdAt: "2025-10-31T10:00:00Z"
        '400':
          description: 재고 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: INSUFFICIENT_STOCK
                  message: 재고가 부족한 상품이 있습니다
                  details:
                    outOfStockProducts:
                      - productId: 10
                        productName: 노트북
                        requestedQuantity: 5
                        availableStock: 3

    get:
      tags:
        - Orders
      summary: 주문 목록 조회
      description: 사용자의 주문 목록을 조회합니다.
      operationId: getOrders
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: 페이지 크기
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING_PAYMENT, COMPLETED, CANCELLED, REFUNDED]
          description: 주문 상태 필터
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: 조회 시작일 (YYYY-MM-DD)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: 조회 종료일 (YYYY-MM-DD)
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  orders:
                    - orderId: 1001
                      orderNumber: ORD-20251031-1001
                      status: COMPLETED
                      totalAmount: 3000000
                      discountAmount: 100000
                      finalAmount: 2900000
                      itemCount: 2
                      createdAt: "2025-10-31T10:00:00Z"
                  pagination:
                    currentPage: 1
                    totalPages: 5
                    totalItems: 100
                    itemsPerPage: 20

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: 주문 조회
      description: 특정 주문의 상세 정보를 조회합니다.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: 주문 ID
          schema:
            type: integer
            format: int64
            example: 1001
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  orderId: 1001
                  orderNumber: ORD-20251031-1001
                  userId: 1
                  status: COMPLETED
                  orderItems:
                    - orderItemId: 1
                      productId: 10
                      productName: 노트북
                      price: 1500000
                      quantity: 2
                      subtotal: 3000000
                  payment:
                    paymentId: 1
                    method: BALANCE
                    originalAmount: 3000000
                    discountAmount: 100000
                    finalAmount: 2900000
                    status: COMPLETED
                    paidAt: "2025-10-31T10:05:00Z"
                  appliedCoupons:
                    - couponId: 10
                      couponName: 10% 할인 쿠폰
                      discountAmount: 100000
                  shippingAddress:
                    recipientName: 홍길동
                    phone: "010-1234-5678"
                    zipCode: "12345"
                    address: 서울시 강남구 테헤란로 123
                    detailAddress: 456호
                  createdAt: "2025-10-31T10:00:00Z"
                  updatedAt: "2025-10-31T10:05:00Z"
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/payment:
    post:
      tags:
        - Payment
      summary: 주문 결제
      description: 주문에 대한 결제를 처리합니다.
      operationId: payOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: 주문 ID
          schema:
            type: integer
            format: int64
            example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentMethod
              properties:
                paymentMethod:
                  type: string
                  enum: [BALANCE]
                  description: 결제 수단
                  example: BALANCE
                couponIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: 사용할 쿠폰 ID 목록
                  example: [10, 20]
      responses:
        '200':
          description: 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  paymentId: 1
                  orderId: 1001
                  orderNumber: ORD-20251031-1001
                  paymentMethod: BALANCE
                  originalAmount: 3000000
                  discountAmount: 300000
                  finalAmount: 2700000
                  appliedCoupons:
                    - couponId: 10
                      couponName: 장바구니 10% 할인
                      couponType: CART
                      discountAmount: 200000
                    - couponId: 20
                      couponName: 특정 상품 할인
                      couponType: CART_ITEM
                      discountAmount: 100000
                      appliedProductId: 10
                  balance:
                    before: 5000000
                    after: 2300000
                    used: 2700000
                  status: COMPLETED
                  paidAt: "2025-10-31T10:05:00Z"
                message: 결제가 완료되었습니다
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                insufficientBalance:
                  summary: 잔액 부족
                  value:
                    success: false
                    error:
                      code: INSUFFICIENT_BALANCE
                      message: 잔액이 부족합니다
                      details:
                        requiredAmount: 2700000
                        currentBalance: 2000000
                        shortfall: 700000
                exceedCouponLimit:
                  summary: 쿠폰 사용 개수 초과
                  value:
                    success: false
                    error:
                      code: EXCEED_COUPON_LIMIT
                      message: 쿠폰 사용 개수를 초과했습니다
                      details:
                        couponType: CART
                        maxAllowed: 2
                        attempted: 3
                invalidCoupon:
                  summary: 유효하지 않은 쿠폰
                  value:
                    success: false
                    error:
                      code: INVALID_COUPON
                      message: 유효하지 않은 쿠폰입니다
                      details:
                        couponId: 10
                        reason: EXPIRED
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 이미 결제 완료된 주문
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: PAYMENT_ALREADY_COMPLETED
                  message: 이미 결제가 완료된 주문입니다

  /coupons/{couponId}/issue:
    post:
      tags:
        - Coupons
      summary: 쿠폰 발급
      description: 선착순 쿠폰을 발급받습니다.
      operationId: issueCoupon
      parameters:
        - name: couponId
          in: path
          required: true
          description: 쿠폰 ID
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '201':
          description: 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  userCouponId: 1
                  couponId: 10
                  couponName: 신규 가입 10% 할인
                  couponType: CART
                  discountType: PERCENTAGE
                  discountValue: 10
                  minOrderAmount: 50000
                  expiresAt: "2025-12-31T23:59:59Z"
                  issuedAt: "2025-10-31T10:00:00Z"
                message: 쿠폰이 발급되었습니다
        '404':
          description: 쿠폰을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 발급 불가 (이미 발급, 소진)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                alreadyIssued:
                  summary: 이미 발급받은 쿠폰
                  value:
                    success: false
                    error:
                      code: COUPON_ALREADY_ISSUED
                      message: 이미 발급받은 쿠폰입니다
                soldOut:
                  summary: 쿠폰 소진
                  value:
                    success: false
                    error:
                      code: COUPON_SOLD_OUT
                      message: 쿠폰이 모두 소진되었습니다

  /coupons/my:
    get:
      tags:
        - Coupons
      summary: 보유 쿠폰 조회
      description: 사용자가 보유한 쿠폰 목록을 조회합니다.
      operationId: getMyCoupons
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [AVAILABLE, USED, EXPIRED]
          description: 쿠폰 상태 필터
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  coupons:
                    - userCouponId: 1
                      couponId: 10
                      couponName: 신규 가입 10% 할인
                      couponType: CART
                      discountType: PERCENTAGE
                      discountValue: 10
                      minOrderAmount: 50000
                      applicableProductIds: null
                      status: AVAILABLE
                      expiresAt: "2025-12-31T23:59:59Z"
                      issuedAt: "2025-10-31T10:00:00Z"
                      usedAt: null
                    - userCouponId: 2
                      couponId: 20
                      couponName: 노트북 5만원 할인
                      couponType: CART_ITEM
                      discountType: FIXED
                      discountValue: 50000
                      minOrderAmount: 0
                      applicableProductIds: [10, 11, 12]
                      status: USED
                      expiresAt: "2025-11-30T23:59:59Z"
                      issuedAt: "2025-10-25T10:00:00Z"
                      usedAt: "2025-10-30T15:30:00Z"
                  totalCount: 2
                  availableCount: 1

  /coupons/usage-history:
    get:
      tags:
        - Coupons
      summary: 쿠폰 사용 이력 조회
      description: 쿠폰 사용 이력을 조회합니다.
      operationId: getCouponUsageHistory
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: 페이지 크기
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  usageHistory:
                    - userCouponId: 2
                      couponName: 노트북 5만원 할인
                      orderId: 1001
                      orderNumber: ORD-20251031-1001
                      discountAmount: 50000
                      usedAt: "2025-10-30T15:30:00Z"
                  pagination:
                    currentPage: 1
                    totalPages: 3
                    totalItems: 50
                    itemsPerPage: 20

  /balance/charge:
    post:
      tags:
        - Balance
      summary: 잔액 충전
      description: 사용자의 잔액을 충전합니다.
      operationId: chargeBalance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: integer
                  minimum: 1000
                  description: 충전 금액 (원, 1,000원 이상)
                  example: 100000
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  transactionId: 1
                  type: CHARGE
                  amount: 100000
                  balance:
                    before: 500000
                    after: 600000
                  createdAt: "2025-10-31T10:00:00Z"
                message: 잔액이 충전되었습니다
        '400':
          description: 잘못된 충전 금액
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: INVALID_CHARGE_AMOUNT
                  message: 충전 금액은 1,000원 이상이어야 합니다
                  details:
                    minAmount: 1000
                    requestedAmount: 500

  /balance:
    get:
      tags:
        - Balance
      summary: 잔액 조회
      description: 현재 사용자의 잔액을 조회합니다.
      operationId: getBalance
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  userId: 1
                  balance: 600000
                  lastUpdatedAt: "2025-10-31T10:00:00Z"

  /balance/history:
    get:
      tags:
        - Balance
      summary: 잔액 사용 이력 조회
      description: 잔액 사용 및 충전 이력을 조회합니다.
      operationId: getBalanceHistory
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: 페이지 번호
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: 페이지 크기
        - name: type
          in: query
          schema:
            type: string
            enum: [CHARGE, PAYMENT, REFUND]
          description: 거래 유형 필터
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  transactions:
                    - transactionId: 1
                      type: CHARGE
                      amount: 100000
                      balanceBefore: 500000
                      balanceAfter: 600000
                      description: 잔액 충전
                      createdAt: "2025-10-31T10:00:00Z"
                    - transactionId: 2
                      type: PAYMENT
                      amount: -50000
                      balanceBefore: 600000
                      balanceAfter: 550000
                      description: 주문 결제 (ORD-20251031-1001)
                      relatedOrderId: 1001
                      createdAt: "2025-10-31T11:00:00Z"
                  pagination:
                    currentPage: 1
                    totalPages: 5
                    totalItems: 100
                    itemsPerPage: 20

  /admin/products:
    post:
      tags:
        - Admin
      summary: 상품 등록
      description: 새로운 상품을 등록합니다.
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - stock
              properties:
                name:
                  type: string
                  maxLength: 100
                  description: 상품명
                  example: 노트북
                description:
                  type: string
                  maxLength: 2000
                  description: 상품 설명
                  example: 고성능 노트북
                price:
                  type: integer
                  minimum: 0
                  description: 가격 (원)
                  example: 1500000
                stock:
                  type: integer
                  minimum: 0
                  description: 초기 재고
                  example: 100
                maxQuantityPerCart:
                  type: integer
                  minimum: 1
                  description: 장바구니 제한 수량
                  example: 5
      responses:
        '201':
          description: 상품 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  productId: 1
                  name: 노트북
                  description: 고성능 노트북
                  price: 1500000
                  stock: 100
                  maxQuantityPerCart: 5
                  status: AVAILABLE
                  createdAt: "2025-10-31T10:00:00Z"
                message: 상품이 등록되었습니다
        '422':
          description: 유효성 검증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: VALIDATION_ERROR
                  message: 입력값 검증에 실패했습니다
                  details:
                    name: 상품명은 필수입니다
                    price: 가격은 0 이상이어야 합니다

  /admin/products/{productId}:
    put:
      tags:
        - Admin
      summary: 상품 수정
      description: 상품 정보를 수정합니다.
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          description: 상품 ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: 고성능 노트북
                description:
                  type: string
                  maxLength: 2000
                  example: 최신 고성능 노트북
                price:
                  type: integer
                  minimum: 0
                  example: 1400000
                maxQuantityPerCart:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  productId: 1
                  name: 고성능 노트북
                  description: 최신 고성능 노트북
                  price: 1400000
                  stock: 100
                  maxQuantityPerCart: 3
                  updatedAt: "2025-10-31T11:00:00Z"
                message: 상품 정보가 수정되었습니다
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/{productId}/stock:
    post:
      tags:
        - Admin
      summary: 재고 조정
      description: 상품의 재고를 조정합니다.
      operationId: adjustStock
      parameters:
        - name: productId
          in: path
          required: true
          description: 상품 ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - quantity
                - reason
              properties:
                type:
                  type: string
                  enum: [INCREASE, DECREASE, SET]
                  description: 조정 유형
                  example: INCREASE
                quantity:
                  type: integer
                  minimum: 1
                  description: 수량
                  example: 50
                reason:
                  type: string
                  description: 조정 사유
                  example: 신규 입고
      responses:
        '200':
          description: 재고 조정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  productId: 1
                  stockBefore: 100
                  stockAfter: 150
                  adjustmentType: INCREASE
                  adjustmentQuantity: 50
                  reason: 신규 입고
                  adjustedAt: "2025-10-31T10:00:00Z"
                  adjustedBy: admin@example.com
                message: 재고가 조정되었습니다
        '400':
          description: 재고를 음수로 만들 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  code: INVALID_STOCK_ADJUSTMENT
                  message: 재고는 음수가 될 수 없습니다
                  details:
                    currentStock: 10
                    requestedDecrease: 20

  /admin/coupons:
    post:
      tags:
        - Admin
      summary: 쿠폰 생성
      description: 새로운 쿠폰을 생성합니다.
      operationId: createCoupon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - discountType
                - discountValue
                - maxIssueCount
                - expiresAt
              properties:
                name:
                  type: string
                  description: 쿠폰명
                  example: 신규 가입 10% 할인
                type:
                  type: string
                  enum: [CART, CART_ITEM]
                  description: 쿠폰 타입
                  example: CART
                discountType:
                  type: string
                  enum: [PERCENTAGE, FIXED]
                  description: 할인 유형
                  example: PERCENTAGE
                discountValue:
                  type: integer
                  minimum: 1
                  description: 할인 값 (퍼센트 또는 금액)
                  example: 10
                maxIssueCount:
                  type: integer
                  minimum: 1
                  description: 최대 발급 수량
                  example: 1000
                minOrderAmount:
                  type: integer
                  minimum: 0
                  description: 최소 주문 금액
                  example: 50000
                applicableProductIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                  description: 적용 대상 상품 ID (CART_ITEM 타입 필수)
                  example: [10, 11, 12]
                expiresAt:
                  type: string
                  format: date-time
                  description: 만료일시
                  example: "2025-12-31T23:59:59Z"
      responses:
        '201':
          description: 쿠폰 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                data:
                  couponId: 10
                  name: 신규 가입 10% 할인
                  type: CART
                  discountType: PERCENTAGE
                  discountValue: 10
                  maxIssueCount: 1000
                  currentIssueCount: 0
                  minOrderAmount: 50000
                  expiresAt: "2025-12-31T23:59:59Z"
                  createdAt: "2025-10-31T10:00:00Z"
                message: 쿠폰이 생성되었습니다

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT 토큰 기반 인증을 사용합니다.

        ### 토큰 획득 방법
        1. 로그인 API를 통해 JWT 토큰 획득
        2. Authorization 헤더에 "Bearer {token}" 형식으로 전달

        ### 예시
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: 응답 데이터
        message:
          type: string
          description: 성공 메시지
          example: 요청이 성공적으로 처리되었습니다

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: 에러 코드
              example: ERROR_CODE
            message:
              type: string
              description: 에러 메시지
              example: 에러가 발생했습니다
            details:
              type: object
              description: 에러 상세 정보
              additionalProperties: true

    ShippingAddress:
      type: object
      required:
        - recipientName
        - phone
        - zipCode
        - address
      properties:
        recipientName:
          type: string
          description: 수령인 이름
          example: 홍길동
        phone:
          type: string
          description: 수령인 연락처
          example: "010-1234-5678"
        zipCode:
          type: string
          description: 우편번호
          example: "12345"
        address:
          type: string
          description: 주소
          example: 서울시 강남구 테헤란로 123
        detailAddress:
          type: string
          description: 상세 주소
          example: 456호
